const express = require("express");
const fs = require("fs");
const path = require("path");
const bcrypt = require("bcryptjs");

const router = express.Router();

// مسار ملفات الداتا (يدعم DATA_DIR على Render)
const DATA_DIR = process.env.DATA_DIR || path.resolve(__dirname, "..", "data");
const USERS_PATH = path.join(DATA_DIR, "users.json");

function readUsers() {
  try {
    const raw = fs.readFileSync(USERS_PATH, "utf8");
    return JSON.parse(raw);
  } catch {
    return [];
  }
}

router.post("/login", async (req, res) => {
  const { email, password } = req.body || {};
  if (!email || !password) {
    return res.status(400).json({ error: "missing_credentials" });
  }

  const users = readUsers();
  const user = users.find(
    (u) => (u.email || "").toLowerCase().trim() === String(email).toLowerCase().trim()
  );

  if (!user) return res.status(401).json({ error: "invalid_credentials" });

  let isMatch = false;

  // 1) لو في password نصية — طابق مباشرة
  if (typeof user.password === "string" && user.password.length > 0) {
    isMatch = password === user.password;
  }

  // 2) لو في passwordHash — جرّب bcrypt
  if (!isMatch && typeof user.passwordHash === "string" && user.passwordHash.length > 0) {
    try {
      isMatch = await bcrypt.compare(password, user.passwordHash);
    } catch {
      // تجاهل أي خطأ في المقارنة
    }
  }

  if (!isMatch) return res.status(401).json({ error: "invalid_credentials" });

  // رجّع بيانات آمنة وتوكن بسيط (لو الفرونت يحتاجه)
  const token = Buffer.from(`${user.id}:${Date.now()}`).toString("base64");
  const safeUser = { id: user.id, name: user.name, email: user.email, role: user.role };

  return res.json({ ok: true, user: safeUser, token });
});

module.exports = router;
